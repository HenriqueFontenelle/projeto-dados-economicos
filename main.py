# main.py (vers√£o para multipage app)
import streamlit as st
import sys
import os
import subprocess

# Importar diretamente os outros scripts
try:
    from data_collector import BCBDataCollector
    from database_manager import DatabaseManager
except ImportError:
    st.error("Erro ao importar m√≥dulos necess√°rios. Verifique as depend√™ncias.")
    st.stop()

# Interface principal
st.set_page_config(
    page_title="Sistema de An√°lise Econ√¥mica - BCB",
    page_icon="üìä",
    layout="wide"
)

st.title("Sistema de An√°lise Econ√¥mica com Dados do Banco Central do Brasil")
st.markdown("""
Este sistema permite coletar, visualizar e analisar dados econ√¥micos do Banco Central do Brasil,
al√©m de criar modelos de machine learning para previs√£o de indicadores.
""")

# Fun√ß√£o para coletar dados
def collect_data():
    with st.spinner("Coletando dados..."):
        collector = BCBDataCollector()
        data = collector.collect_all_data(last_n_years=5)
        db = DatabaseManager()
        results = db.save_all_data(data)
        if all(results.values()):
            st.success("Dados coletados e salvos com sucesso!")
        else:
            st.warning("Alguns dados n√£o puderam ser salvos.")

# Organizar o layout de navega√ß√£o
page = st.sidebar.selectbox(
    "Selecione uma op√ß√£o:",
    ["P√°gina Inicial", "Dashboard Econ√¥mico", "Previs√µes com ML"]
)

# P√°gina inicial
if page == "P√°gina Inicial":
    # Menu principal
    st.header("Escolha uma op√ß√£o:")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("Coleta de Dados")
        st.markdown("Atualiza a base de dados com os √∫ltimos dados dispon√≠veis nas APIs do BCB.")
        if st.button("Coletar Dados"):
            collect_data()
    
    with col2:
        st.subheader("Dashboard Econ√¥mico")
        st.markdown("Visualize os indicadores econ√¥micos e suas tend√™ncias.")
        if st.button("Abrir Dashboard"):
            st.sidebar.selectbox(
                "Selecione uma op√ß√£o:",
                ["Dashboard Econ√¥mico"],
                key="force_dashboard"
            )
            st.experimental_rerun()
    
    with col3:
        st.subheader("Previs√µes com ML")
        st.markdown("Use machine learning para prever tend√™ncias futuras dos indicadores.")
        if st.button("Abrir Previs√µes"):
            st.sidebar.selectbox(
                "Selecione uma op√ß√£o:",
                ["Previs√µes com ML"],
                key="force_ml"
            )
            st.experimental_rerun()
    
    # Informa√ß√µes adicionais
    st.header("Documenta√ß√£o")
    st.markdown("""
    ### Como usar este sistema
    
    1. **Coleta de Dados**: Primeiro, colete os dados mais recentes das APIs do Banco Central do Brasil.
    2. **Dashboard Econ√¥mico**: Visualize os indicadores e suas rela√ß√µes.
    3. **Previs√µes com ML**: Treine modelos preditivos e visualize previs√µes futuras.
    """)

# Dashboard Econ√¥mico
elif page == "Dashboard Econ√¥mico":
    # Importar o app.py aqui
    try:
        import app
    except ImportError:
        st.error("N√£o foi poss√≠vel carregar o dashboard econ√¥mico.")
        if st.button("Voltar"):
            st.sidebar.selectbox(
                "Selecione uma op√ß√£o:",
                ["P√°gina Inicial"],
                key="back_home"
            )
            st.experimental_rerun()

# Previs√µes com ML
elif page == "Previs√µes com ML":
    # Importar o ml_app.py aqui
    try:
        import ml_app
    except ImportError:
        st.error("N√£o foi poss√≠vel carregar o dashboard de previs√µes.")
        if st.button("Voltar"):
            st.sidebar.selectbox(
                "Selecione uma op√ß√£o:",
                ["P√°gina Inicial"],
                key="back_home"
            )
            st.experimental_rerun()