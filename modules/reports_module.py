# modules/reports_module.py - VERS√ÉO CORRIGIDA
import streamlit as st
from ai_report_generator import ReportGenerator, generate_quick_report
from config import config
from utils.base_module import BaseModule
import json
from datetime import datetime
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class ReportsModule(BaseModule):
    """M√≥dulo para gera√ß√£o de relat√≥rios com IA"""
    
    def render(self):
        st.title("üìã Relat√≥rios Econ√¥micos com Intelig√™ncia Artificial")
        
        st.markdown("""
        Esta se√ß√£o utiliza **Intelig√™ncia Artificial** para gerar an√°lises autom√°ticas dos indicadores econ√¥micos,
        incluindo detec√ß√£o de tend√™ncias, correla√ß√µes e previs√µes futuras.
        
        **üÜï Novidades v2.0:**
        - An√°lise autom√°tica de tend√™ncias
        - Detec√ß√£o de outliers e anomalias  
        - Correla√ß√µes entre indicadores
        - Insights contextualizados por IA
        - Resumo executivo autom√°tico
        """)
        
        # Tipos de relat√≥rio dispon√≠veis
        st.subheader("üìä Tipos de Relat√≥rio Dispon√≠veis")
        
        report_type = st.selectbox(
            "Selecione o tipo de relat√≥rio",
            config.reports.report_types,
            format_func=self._format_report_type,
            help="Diferentes tipos de an√°lise econ√¥mica"
        )
        
        # Configura√ß√µes do relat√≥rio
        self._render_report_config(report_type)
        
        # Bot√£o para gerar relat√≥rio
        if st.button("üöÄ Gerar Relat√≥rio com IA", use_container_width=True, type="primary"):
            months_back = st.session_state.get('months_back', 12)
            include_predictions = st.session_state.get('include_predictions', True)
            include_correlations = st.session_state.get('include_correlations', True)
            
            self._generate_report(report_type, months_back, include_predictions, include_correlations)
        
        st.markdown("---")
        
        # Mostrar relat√≥rios anteriores
        self._show_previous_reports()
    
    def _render_report_config(self, report_type: str):
        """Renderiza configura√ß√µes do relat√≥rio"""
        
        st.subheader("‚öôÔ∏è Configura√ß√µes do Relat√≥rio")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            months_back = st.slider(
                "Per√≠odo de an√°lise (meses)",
                min_value=3,
                max_value=24,
                value=12,
                help="Quantos meses retroativos analisar"
            )
            st.session_state.months_back = months_back
        
        with col2:
            include_predictions = st.checkbox(
                "Incluir previs√µes",
                value=True,
                help="Adicionar an√°lise preditiva ao relat√≥rio"
            )
            st.session_state.include_predictions = include_predictions
        
        with col3:
            include_correlations = st.checkbox(
                "Incluir correla√ß√µes",
                value=True,
                help="Analisar correla√ß√µes entre indicadores"
            )
            st.session_state.include_correlations = include_correlations
        
        # Configura√ß√µes avan√ßadas espec√≠ficas por tipo
        with st.expander("üîß Configura√ß√µes Avan√ßadas"):
            
            if report_type == 'monetary_policy_analysis':
                st.markdown("**An√°lise de Pol√≠tica Monet√°ria:**")
                focus_indicators = st.multiselect(
                    "Indicadores de foco",
                    ['ipca', 'selic', 'selic_meta', 'igpm'],
                    default=['ipca', 'selic', 'selic_meta'],
                    help="Indicadores principais para an√°lise monet√°ria"
                )
                st.session_state.focus_indicators = focus_indicators
            
            elif report_type == 'inflation_forecast':
                st.markdown("**Previs√£o de Infla√ß√£o:**")
                inflation_horizon = st.slider(
                    "Horizonte de previs√£o (meses)",
                    3, 18, 12,
                    help="Quantos meses prever a infla√ß√£o"
                )
                st.session_state.inflation_horizon = inflation_horizon
            
            elif report_type == 'fiscal_health':
                st.markdown("**Sa√∫de Fiscal:**")
                fiscal_indicators = st.multiselect(
                    "Indicadores fiscais",
                    ['divida_pib', 'resultado_primario'],
                    default=['divida_pib', 'resultado_primario'],
                    help="Indicadores para an√°lise fiscal"
                )
                st.session_state.fiscal_indicators = fiscal_indicators
            
            elif report_type == 'external_sector':
                st.markdown("**Setor Externo:**")
                external_indicators = st.multiselect(
                    "Indicadores externos",
                    ['cambio_usd', 'transacoes', 'reservas_internacionais'],
                    default=['cambio_usd', 'transacoes'],
                    help="Indicadores do setor externo"
                )
                st.session_state.external_indicators = external_indicators
            
            # Configura√ß√µes gerais de IA
            st.markdown("**Configura√ß√µes de IA:**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                confidence_threshold = st.slider(
                    "Threshold de confian√ßa",
                    min_value=0.1,
                    max_value=1.0,
                    value=config.reports.confidence_threshold,
                    step=0.1,
                    help="N√≠vel m√≠nimo de confian√ßa para insights"
                )
                st.session_state.confidence_threshold = confidence_threshold
            
            with col2:
                max_insights = st.slider(
                    "M√°ximo de insights por indicador",
                    min_value=1,
                    max_value=10,
                    value=config.reports.max_insights_per_indicator,
                    help="Quantos insights gerar por indicador"
                )
                st.session_state.max_insights = max_insights
    
    def _format_report_type(self, report_type: str) -> str:
        """Formata nome do tipo de relat√≥rio para exibi√ß√£o"""
        mapping = {
            'economic_overview': 'üåç Panorama Econ√¥mico Geral',
            'monetary_policy_analysis': 'üè¶ An√°lise de Pol√≠tica Monet√°ria',
            'inflation_forecast': 'üìà Previs√£o de Infla√ß√£o',
            'fiscal_health': 'üí∞ Sa√∫de Fiscal',
            'external_sector': 'üåê Setor Externo',
            'custom_analysis': 'üîß An√°lise Personalizada'
        }
        return mapping.get(report_type, report_type.title())
    
    def _generate_report(self, report_type: str, months_back: int, include_predictions: bool, include_correlations: bool):
        """Gera relat√≥rio com IA"""
        
        progress_container = st.container()
        
        with progress_container:
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                status_text.text("üîÑ Inicializando gerador de relat√≥rios...")
                progress_bar.progress(0.1)
                
                generator = ReportGenerator()
                
                status_text.text("üìä Coletando e analisando dados...")
                progress_bar.progress(0.3)
                
                # Gerar relat√≥rio baseado no tipo
                if report_type == 'economic_overview':
                    report_data = generator.generate_economic_overview(months_back)
                else:
                    # Para outros tipos, usar overview como base e personalizar
                    report_data = generator.generate_economic_overview(months_back)
                    report_data['report_type'] = report_type
                    report_data['title'] = self._get_report_title(report_type)
                    
                    # Personalizar baseado no tipo
                    report_data = self._customize_report_by_type(report_data, report_type)
                
                progress_bar.progress(0.7)
                status_text.text("üé® Criando visualiza√ß√µes...")
                
                # Criar visualiza√ß√µes
                html_path = generator.create_visual_report(report_data)
                
                progress_bar.progress(0.9)
                status_text.text("üíæ Salvando relat√≥rio...")
                
                # Exportar dados
                json_path = generator.export_report_to_json(report_data)
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ Relat√≥rio gerado com sucesso!")
                
                # Limpar progress ap√≥s 2 segundos
                import time
                time.sleep(2)
                progress_container.empty()
                
                # Mostrar resultados
                self._display_report_results(report_data, html_path, json_path)
                
            except Exception as e:
                st.error(f"‚ùå Erro ao gerar relat√≥rio: {e}")
                logger.error(f"Erro na gera√ß√£o de relat√≥rio: {e}", exc_info=True)
                
                # Sugest√µes de solu√ß√£o
                with st.expander("üí° Poss√≠veis solu√ß√µes"):
                    st.markdown("""
                    - Verifique se h√° dados coletados para o per√≠odo
                    - Tente reduzir o per√≠odo de an√°lise
                    - Execute a coleta de dados primeiro
                    - Verifique se h√° modelos ML treinados (para previs√µes)
                    """)
    
    def _get_report_title(self, report_type: str) -> str:
        """Retorna t√≠tulo personalizado por tipo de relat√≥rio"""
        titles = {
            'monetary_policy_analysis': 'An√°lise de Pol√≠tica Monet√°ria Brasileira',
            'inflation_forecast': 'Relat√≥rio de Previs√£o de Infla√ß√£o',
            'fiscal_health': 'An√°lise da Sa√∫de Fiscal do Brasil',
            'external_sector': 'Relat√≥rio do Setor Externo',
            'custom_analysis': 'An√°lise Econ√¥mica Personalizada'
        }
        return titles.get(report_type, 'Relat√≥rio Econ√¥mico')
    
    def _customize_report_by_type(self, report_data: dict, report_type: str) -> dict:
        """Personaliza relat√≥rio baseado no tipo"""
        
        if report_type == 'monetary_policy_analysis':
            # Focar em indicadores monet√°rios
            focus_indicators = st.session_state.get('focus_indicators', ['ipca', 'selic'])
            
            # Filtrar apenas indicadores monet√°rios
            if 'sections' in report_data and 'indicators' in report_data['sections']:
                filtered_indicators = {
                    k: v for k, v in report_data['sections']['indicators'].items() 
                    if k in focus_indicators
                }
                report_data['sections']['indicators'] = filtered_indicators
        
        elif report_type == 'inflation_forecast':
            # Focar apenas em infla√ß√£o
            if 'sections' in report_data and 'indicators' in report_data['sections']:
                inflation_indicators = {
                    k: v for k, v in report_data['sections']['indicators'].items() 
                    if k in ['ipca', 'igpm', 'inpc']
                }
                report_data['sections']['indicators'] = inflation_indicators
        
        elif report_type == 'fiscal_health':
            # Focar em indicadores fiscais
            fiscal_indicators = st.session_state.get('fiscal_indicators', ['divida_pib', 'resultado_primario'])
            
            if 'sections' in report_data and 'indicators' in report_data['sections']:
                filtered_indicators = {
                    k: v for k, v in report_data['sections']['indicators'].items() 
                    if k in fiscal_indicators
                }
                report_data['sections']['indicators'] = filtered_indicators
        
        elif report_type == 'external_sector':
            # Focar em setor externo
            external_indicators = st.session_state.get('external_indicators', ['cambio_usd', 'transacoes'])
            
            if 'sections' in report_data and 'indicators' in report_data['sections']:
                filtered_indicators = {
                    k: v for k, v in report_data['sections']['indicators'].items() 
                    if k in external_indicators
                }
                report_data['sections']['indicators'] = filtered_indicators
        
        return report_data
    
    def _display_report_results(self, report_data: dict, html_path: str, json_path: str):
        """Exibe resultados do relat√≥rio gerado"""
        
        st.success("üéâ Relat√≥rio gerado com sucesso!")
        
        # Downloads
        col1, col2 = st.columns(2)
        
        with col1:
            with open(html_path, 'rb') as f:
                st.download_button(
                    "üìä Baixar Visualiza√ß√µes (HTML)",
                    data=f.read(),
                    file_name=f"relatorio_visual_{datetime.now().strftime('%Y%m%d_%H%M')}.html",
                    mime="text/html",
                    use_container_width=True
                )
        
        with col2:
            with open(json_path, 'rb') as f:
                st.download_button(
                    "üìÑ Baixar Dados (JSON)",
                    data=f.read(),
                    file_name=f"relatorio_dados_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                    mime="application/json",
                    use_container_width=True
                )
        
        # Resumo Executivo
        if 'executive_summary' in report_data:
            st.subheader("üìã Resumo Executivo")
            
            for point in report_data['executive_summary']:
                st.markdown(f"‚Ä¢ {point}")
        
        # Detalhes dos indicadores
        if 'sections' in report_data and 'indicators' in report_data['sections']:
            st.subheader("üìä An√°lise Detalhada dos Indicadores")
            
            indicators_data = report_data['sections']['indicators']
            
            for indicator, data in indicators_data.items():
                with st.expander(f"üîç {data.get('name', indicator)}"):
                    
                    # M√©tricas principais
                    if data.get('last_value') is not None:
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            change_pct = data['trend_analysis'].get('recent_change_pct', 0)
                            st.metric(
                                "√öltimo Valor",
                                f"{data['last_value']:.4f}",
                                delta=f"{change_pct:+.2f}%"
                            )
                        
                        with col2:
                            trend = data['trend_analysis']['trend']
                            trend_emoji = "üìà" if trend == "ascending" else "üìâ" if trend == "descending" else "‚û°Ô∏è"
                            st.metric("Tend√™ncia", f"{trend_emoji} {trend.title()}")
                        
                        with col3:
                            confidence = data['trend_analysis'].get('confidence', 0)
                            confidence_color = "üü¢" if confidence > 0.7 else "üü°" if confidence > 0.4 else "üî¥"
                            st.metric("Confian√ßa", f"{confidence_color} {confidence:.2f}")
                    
                    # Insights da IA
                    if data.get('insights'):
                        st.markdown("**üí° Insights da IA:**")
                        for i, insight in enumerate(data['insights'], 1):
                            st.markdown(f"{i}. {insight}")
                    
                    # Dados t√©cnicos - REMOVIDO O EXPANDER ANINHADO
                    if 'trend_analysis' in data:
                        ta = data['trend_analysis']
                        
                        st.markdown("**üìà Dados T√©cnicos:**")
                        st.write(f"**Volatilidade:** {ta.get('volatility', 0):.2f}%")
                        st.write(f"**Per√≠odo analisado:** {ta.get('period_days', 0)} dias")
                        st.write(f"**Slope:** {ta.get('slope', 0):.6f}")
        
        # Correla√ß√µes
        if 'sections' in report_data and 'correlations' in report_data['sections']:
            correlations = report_data['sections']['correlations']
            
            if correlations:
                st.subheader("üîó Correla√ß√µes Identificadas")
                
                for corr_key, corr_data in correlations.items():
                    indicators = corr_key.split('_')
                    correlation_value = corr_data['correlation']
                    strength = corr_data['strength']
                    direction = corr_data['direction']
                    
                    # Emojis baseados na for√ßa e dire√ß√£o
                    direction_emoji = "üìà" if direction == "positive" else "üìâ"
                    
                    if strength == "very_strong":
                        strength_emoji = "üî¥"
                        strength_text = "muito forte"
                    elif strength == "strong":
                        strength_emoji = "üü†"
                        strength_text = "forte"
                    elif strength == "moderate":
                        strength_emoji = "üü°"
                        strength_text = "moderada"
                    else:
                        strength_emoji = "üü¢"
                        strength_text = "fraca"
                    
                    st.markdown(
                        f"{direction_emoji} {strength_emoji} **{indicators[0].upper()} vs {indicators[1].upper()}**: "
                        f"Correla√ß√£o {direction} {strength_text} ({correlation_value:.3f})"
                    )
        
        # Previs√µes (se dispon√≠veis)
        if 'sections' in report_data and 'predictions' in report_data['sections']:
            predictions = report_data['sections']['predictions']
            
            if predictions:
                st.subheader("üîÆ Previs√µes")
                
                for indicator, pred_data in predictions.items():
                    trend_forecast = pred_data.get('trend_forecast', 'est√°vel')
                    trend_emoji = "üìà" if trend_forecast == "ascending" else "üìâ" if trend_forecast == "descending" else "‚û°Ô∏è"
                    
                    st.markdown(f"{trend_emoji} **{indicator.upper()}**: Tend√™ncia {trend_forecast} prevista")
        
        # Metadados do relat√≥rio
        st.subheader("‚ÑπÔ∏è Informa√ß√µes do Relat√≥rio")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**T√≠tulo:** {report_data.get('title', 'N/A')}")
            st.write(f"**Tipo:** {report_data.get('report_type', 'economic_overview')}")
        
        with col2:
            st.write(f"**Gerado em:** {report_data.get('generated_at', 'N/A')}")
            st.write(f"**Per√≠odo:** {report_data.get('period_months', 'N/A')} meses")
    
    def _show_previous_reports(self):
        """Mostra relat√≥rios anteriores gerados"""
        st.subheader("üìÅ Relat√≥rios Anteriores")
        
        # Listar arquivos de relat√≥rio no diret√≥rio
        reports_dir = Path(config.reports.output_dir)
        
        if reports_dir.exists():
            html_files = list(reports_dir.glob("relatorio_economico_*.html"))
            json_files = list(reports_dir.glob("relatorio_dados_*.json"))
            
            if html_files or json_files:
                # Mostrar √∫ltimos 5 relat√≥rios
                for html_file in sorted(html_files, reverse=True)[:5]:
                    timestamp_parts = html_file.stem.split('_')[-2:]
                    if len(timestamp_parts) == 2:
                        date_part, time_part = timestamp_parts
                        try:
                            date_str = f"{date_part[:4]}-{date_part[4:6]}-{date_part[6:8]} {time_part[:2]}:{time_part[2:4]}"
                            
                            with st.expander(f"üìä Relat√≥rio de {date_str}"):
                                col1, col2, col3 = st.columns(3)
                                
                                with col1:
                                    if html_file.exists():
                                        st.download_button(
                                            "üìä Baixar HTML",
                                            data=html_file.read_bytes(),
                                            file_name=html_file.name,
                                            mime="text/html",
                                            use_container_width=True
                                        )
                                
                                with col2:
                                    json_file = reports_dir / html_file.name.replace('relatorio_economico_', 'relatorio_dados_').replace('.html', '.json')
                                    if json_file.exists():
                                        st.download_button(
                                            "üìÑ Baixar JSON",
                                            data=json_file.read_bytes(),
                                            file_name=json_file.name,
                                            mime="application/json",
                                            use_container_width=True
                                        )
                                
                                with col3:
                                    # Mostrar preview do resumo (se poss√≠vel)
                                    if json_file.exists():
                                        try:
                                            with open(json_file, 'r', encoding='utf-8') as f:
                                                report_data = json.load(f)
                                            
                                            if 'executive_summary' in report_data:
                                                st.write("**Preview:**")
                                                summary = report_data['executive_summary']
                                                if summary:
                                                    st.caption(summary[0][:100] + "..." if len(summary[0]) > 100 else summary[0])
                                        except:
                                            st.caption("Preview n√£o dispon√≠vel")
                        except:
                            continue
            else:
                st.info("üìÑ Nenhum relat√≥rio anterior encontrado. Gere seu primeiro relat√≥rio!")
                
                # Dicas para primeiro uso
                with st.expander("üí° Dicas para seu primeiro relat√≥rio"):
                    st.markdown("""
                    ### üöÄ Como come√ßar:
                    
                    1. **Primeiro passo**: Execute a coleta de dados (se ainda n√£o fez)
                    2. **Escolha o tipo**: Para come√ßar, recomendamos "Panorama Econ√¥mico Geral"
                    3. **Configure o per√≠odo**: 12 meses √© um bom per√≠odo inicial
                    4. **Gere o relat√≥rio**: Clique em "Gerar Relat√≥rio com IA"
                    
                    ### üìä Tipos recomendados por caso de uso:
                    
                    - **An√°lise geral**: Panorama Econ√¥mico Geral
                    - **Foco em infla√ß√£o**: Previs√£o de Infla√ß√£o
                    - **Pol√≠tica monet√°ria**: An√°lise de Pol√≠tica Monet√°ria
                    - **Situa√ß√£o fiscal**: Sa√∫de Fiscal
                    - **Economia externa**: Setor Externo
                    """)
        else:
            st.info("üìÇ Diret√≥rio de relat√≥rios n√£o encontrado.")
            
            if st.button("üìÅ Criar Diret√≥rio de Relat√≥rios"):
                reports_dir.mkdir(parents=True, exist_ok=True)
                st.success("‚úÖ Diret√≥rio criado com sucesso!")
                st.rerun()